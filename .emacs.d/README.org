* 初期設定
** auto-install
   パッケージインストールをemacs上から行うためのパッケージ
*** インストール
    $ mkdir -p ~/.emacs.d/site-lisp
    $ cd ~/.emacs.d/site-lisp/
    $ wget http://www.emacswiki.org/emacs/download/auto-install.el
    $ emacs --batch -Q -f batch-byte-compile auto-install.el
*** .emacs.d/init.dの記述
===============================================================
;; load-pathを再起的に定義
(let ((default-directory "~/.emacs.d/site-lisp"))
(setq load-path (cons default-directory load-path))
(normal-top-level-add-subdirs-to-load-path))

;; auto-installの設定
(require 'auto-install)
(setq auto-install-directory "~/.emacs.d/site-lisp/auto-install/")
;(auto-install-update-emacswiki-package-name t) ;; 必要に応じて使用する
(auto-install-compatibility-setup)
(setq auto-install-save-confirm nil)

;; 基本設定
(setq inhibit-startup-message t) ;; 初期画面を表示しない
(menu-bar-mode nil) ;; メニューバーを表示しない
(require 'tool-bar)
(tool-bar-mode nil) ;; ツールバーを表示しない
(line-number-mode t) ;; 現在の行番号を表示する
(column-number-mode t) ;; 現在の列番号を表示する
(which-function-mode t) ;; 現在の関数を表示する
===============================================================
** その他基本設定
*** .emacs.d/init.dの記述
===============================================================
;; その他の設定
(global-set-key "\C-h" 'delete-backward-char) ;; C-hを1文字削除に変更
(setq frame-title-format (format "%%b - %s:%%f"  (system-name))) ;; フレームタイトルの設定
(global-font-lock-mode t) ;; 色をつける
(require 'scroll-bar)
(set-scroll-bar-mode 'right) ;; スクロールバーを右側に表示する
(setq history-length 1000) ;; 履歴をたくさん表示する
(setq undo-limit 100000)
(setq undo-strong-limit 130000) ;; undoの数を増やす
(setq transient-mark-mode t) ;; 範囲に色をつける
(setq scroll-conservatively 1)
(setq scroll-step 1) ;; スクロールの設定
(add-to-list 'default-frame-alist
'(font . "-unknown-Takaoゴシック-normal-normal-normal-*-14-*-*-*-d-0-iso10646-1")) ;; デフォルトのフォントの設定
;(setq make-backup-files nil) ;; バックアップファイルを作らない
(setq auto-save-default nil) ;; 自動保存を行わない
(set-language-environment "UTF-8") ;; 日本語の設定
(define-key global-map [?¥] [?\\]) ;; ¥の代わりにバックスラッシュを入力する
(setq locale-coding-system 'utf-8) ;; ansi-termでの日本語の設定
===============================================================
** anything
   複数情報源（source）からインクリメンタルに候補を選択、複数の操作
   （action）をひとめとめにし、カレントでぃレクトリのファイル、バッファ、
   過去にアクセスしたファイルに対して、一括検索などが行える
*** インストール
    auto-installがインストールされた状態で
    M-x auto-install-batch RET anything
    またはemacs上のどこかの行で
    (auto-install-batch "anything")
    を記述して C-x C-e（eval-last-sexp）を実行する
*** .emacs.d/init.dの記述
===============================================================
;; anythingの設定
(require 'anything-startup)
(require 'anything-match-plugin)
(setq anything-quick-update t) ;; 候補が多い時に体感速度を早くする
(setq anything-enable-shortcuts 'alphabet) ;; 候補選択ショートカット
;; anythingのprefixキーを変更する（デフォルトF5 a）
(custom-set-variables '(anything-command-map-prefix-key " a"))
;; anythingの画面の表示方法を変更する
(define-key anything-map (kbd "M-n") 'anything-next-source)
(define-key anything-map (kbd "M-p") 'anything-previous-source)
(defun anything-split-window (buf)
  (split-window)
  (other-window 1)
  (switch-to-buffer buf))
(setq anything-display-function 'anything-split-window)
;; 最近使ったファイルの保存数を増やす
(when (require 'recent nil t)
  (custum-set-variables '(recentf-save-file "~/.emacs.d/recent"))
  (setq recentf-max-saved-items 3000)
  (recentf-mode 1))
===============================================================
*** Ubuntu（Debian）の場合
    上記の方法でインストールしたところ設定ファイルの 
    (setq anything-quick-update t) の部分で引数エラーが発生し、C-x b
    のバッファ切り替えができなくなってしまった※
    Ubuntu（Debian）ではanithing-elパッケージが存在するので、そちらを
    インストールして使用する
    ※）引数が number-or-marker-p を満たしていないというエラーが出る
        emacsのUbuntu（Debian）パッケージの関係かも
** auto-complete
   自動で入力補完をしてくれるライブラリ
*** インストール
    auto-installがインストールされた状態で
    M-x auto-install-batch RET auto-complete
    またはemacs上のどこかの行で
    (auto-install-batch "auto-complete")
    を記述して C-x C-e（eval-last-sexp）を実行する
*** .emacs.d/init.elの記述
===============================================================
;; auto-completeの設定
(require 'auto-complete)
(require 'auto-complete-config)
(global-auto-complete-mode t)
===============================================================
*** Ubuntu（Debian）の場合
    Ubuntu（Debian）ではauto-complete-elパッケージが存在するので、そちらを
    インストールして使用する
** popwin
   ポップアップウィンドウを実現するためのライブラリ
*** ソース
    https://github.com/m2ym/popwin-el
*** インストール
    auto-installがインストールされた状態で、
    M-x auto-install-from-url RET https://raw.github.com/purcell/ac-slime/master/ac-slime.el
*** .emacs.d/init.elの記述
===============================================================
;; popwinの設定
(require 'popwin)
(setq display-buffer-function 'popwin:display-buffer)
===============================================================
** color-theme
   色とテーマを設定するライブラリ
*** インストール
    # 2013/11/25現在
    # 最新は http://www.emacswiki.org/emacs/ColorTheme で確認する
    $ wget http://download.savannah.gnu.org/releases/color-theme/color-theme-6.6.0.tar.gz
    $ tar xvzf color-theme-6.6.0.tar.gz
    $ mv color-theme-6.6.0 color-theme
*** .emacs.d/init.dの記述
===============================================================
;; 色（theme）の設定
(require 'color-theme)
(color-theme-initialize)
(color-theme-classic)
===============================================================
* Common Lispのための設定
** SLIME
   Common Lispのための統合化開発環境（IDE）
*** インストール
    # 2013/11/25現在
    # 最新は http://common-lisp.net/project/slime/ で確認する
    $ wget http://common-lisp.net/project/slime/snapshots/slime-current.tgz
    $ tar xvzf slime-current.tgz
    $ mv slime-2013-04-05 ~/.emacs.d/site-lisp/slime
*** .emacs.d/init.dの記述
===============================================================
;; SLIMEの設定
(setq inferior-lisp-program "/usr/local/bin/sbcl") ;; SBCLをCommon Lisp処理系に設定
;(setq inferior-lisp-program "/usr/local/bin/clisp") ;; CLISPをCommon Lisp処理系に設定
(add-to-list 'load-path (expand-file-name "~/.emacs.d/site-lisp/slime-2013-03-01")) ;; ~/.emacs.d/site-lisp/slimeをload-pathに追加
(require 'slime)
(slime-setup '(slime-repl slime-fancy slime-banner)) ;; SLIMEのロード
===============================================================
*** Ubuntu（Debian）の場合
    emacsのUbuntu（Debian）パッケージの関係で上記の方法でslimeをインス
    トールすると実行時にエラーを吐いて止まる※
    なのでUbuntu（Debian）の場合はslimeのUbuntu（Debian）パッケージが
    存在するので、それをインストールする
    ※）参考: https://bugs.launchpad.net/ubuntu/+source/slime/+bug/915807
** popwin
*** .emacs.d/init.elの記述
===============================================================
;; popwinのSLIME設定
(push '("*slime-apropos*") popwin:special-display-config)
(push '("*slime-macroexpansion*") popwin:special-display-config)
(push '("*slime-description*") popwin:special-display-config)
(push '("*slime-compilation*" :noselect t) popwin:special-display-config)
(push '("*slime-xref*") popwin:special-display-config)
(push '(sldb-mode :stick t) popwin:special-display-config)
(push '(slime-repl-mode) popwin:special-display-config)
(push '(slime-connection-list-mode) popwin:special-display-config)
===============================================================
** ac-slime
   auto-complete.elのSLIME拡張
*** ソース
    https://github.com/purcell/ac-slime
*** インストール
    auto-installとauto-completeがインストールされた状態で、
    M-x auto-install-from-url RET https://raw.github.com/purcell/ac-slime/master/ac-slime.el
*** .emacs.d/init.elの記述
===============================================================
;; ac-slimeの設定
(require 'ac-slime)
(add-hook 'slime-mode-hook 'set-up-slime-ac)
(add-hook 'slime-repl-mode-hook 'set-up-slime-ac)
===============================================================
* Scalaのための設定
** scala-mode
*** ソース
    https://github.com/scala/scala-dist/tree/master/tool-support/src/emacs
*** インストール
    $ git clone https://github.com/scala/scala-dist.git
    $ ln -s /path/to/scala/scala-dist/tool-support/src/emacs ~/.emacs.d/site-lisp/scala-mode
*** .emacs.d/init.elの記述
===============================================================
;; scala-modeの設定
(setenv "JAVA_TOOL_OPTIONS" "-Dfile.encoding=UTF-8") ;; Javaの文字コードをUTF-8に設定
(setq scala-interpreter "/usr/local/bin/scala")
(require 'scala-mode-auto)
(add-hook 'scala-mode-hook
	  (lambda ()
	    (scala-electric-mode)))
===============================================================
